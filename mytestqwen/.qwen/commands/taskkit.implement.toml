description = "按照 tasks.md 中定义的全部 Tasks 处理并执行，实现实施计划。"

prompt = """
---
description: 按照 tasks.md 中定义的全部 Tasks 处理并执行，实现实施计划。
---

## 用户输入

```text
$ARGUMENTS
```

在继续之前，若用户输入不为空，你必须考虑它。

## 大纲（Outline）

1. 从仓库根目录运行 `.specify/scripts/powershell/check-prerequisites.ps1 -Json -RequireTasks -IncludeTasks` 并解析 FEATURE_DIR 与 AVAILABLE_DOCS。所有路径必须是绝对路径。对于单引号参数（如 "I'm Groot"），使用转义：例如 `'I'\\''m Groot'`（或尽可能使用双引号："I'm Groot"）。

2. **检查 checklist 状态**（若存在 FEATURE_DIR/checklists/）：
   - 扫描 checklists/ 目录中的所有 Checklist 文件
   - 对每个 Checklist 统计：
     * Total items：匹配 `- [ ]` 或 `- [X]` 或 `- [x]` 的所有行
     * Completed items：匹配 `- [X]` 或 `- [x]` 的行
     * Incomplete items：匹配 `- [ ]` 的行
   - 生成状态表：
     ```
     | Checklist | Total | Completed | Incomplete | Status |
     |-----------|-------|-----------|------------|--------|
     | ux.md     | 12    | 12        | 0          | ✓ PASS |
     | test.md   | 8     | 5         | 3          | ✗ FAIL |
     | security.md | 6   | 6         | 0          | ✓ PASS |
     ```
   - 计算总体状态：
     * PASS：所有 Checklist 的 Incomplete 均为 0
     * FAIL：至少一个 Checklist 的 Incomplete > 0
   
   - **若存在未完成 Checklist**：
     * 显示含未完成项计数的表格
     * **STOP** 并询问：“Some checklists are incomplete. Do you want to proceed with implementation anyway? (yes/no)”
     * 等待用户响应后再继续
     * 若用户答“no/wait/stop”，则停止执行
     * 若用户答“yes/proceed/continue”，则继续至步骤 3
   
   - **若所有 Checklist 均已完成**：
     * 显示所有 Checklist 通过的表格
     * 自动进入步骤 3

3. 加载并分析实施上下文：
   - REQUIRED：读取 tasks.md 获取完整任务列表与执行计划
   - REQUIRED：读取 plan.md 获取技术栈、架构与文件结构
   - IF EXISTS：读取 data-model.md 获取实体与关系
   - IF EXISTS：读取 contracts/ 获取 API 规范与测试需求
   - IF EXISTS：读取 research.md 获取技术决策与约束
   - IF EXISTS：读取 quickstart.md 获取集成场景

4. **Project Setup Verification**：
   - REQUIRED：基于项目实际设置创建/校验 ignore 文件：
   
   **Detection & Creation Logic**：
   - 运行以下命令以判断仓库是否为 git 仓库（如是则创建/校验 .gitignore）：

     ```sh
     git rev-parse --git-dir 2>/dev/null
     ```
   - 检查是否存在 Dockerfile* 或 plan.md 中使用 Docker → 创建/校验 .dockerignore
   - 检查是否存在 .eslintrc* 或 eslint.config.* → 创建/校验 .eslintignore
   - 检查是否存在 .prettierrc* → 创建/校验 .prettierignore
   - 检查是否存在 .npmrc 或 package.json → 创建/校验 .npmignore（若发布）
   - 检查是否存在 terraform 文件（*.tf）→ 创建/校验 .terraformignore
   - 检查是否需要 .helmignore（存在 helm charts）→ 创建/校验 .helmignore
   
   **若 ignore 文件已存在**：校验其包含必要模式，仅追加缺失的关键模式
   **若 ignore 文件缺失**：按检测到的技术栈创建完整模式集
   
   **Common Patterns by Technology**（源自 plan.md 的技术栈）：
   - Node.js/JavaScript：`node_modules/`、`dist/`、`build/`、`*.log`、`.env*`
   - Python：`__pycache__/`、`*.pyc`、`.venv/`、`venv/`、`dist/`、`*.egg-info/`
   - Java：`target/`、`*.class`、`*.jar`、`.gradle/`、`build/`
   - C#/.NET：`bin/`、`obj/`、`*.user`、`*.suo`、`packages/`
   - Go：`*.exe`、`*.test`、`vendor/`、`*.out`
   - Universal：`.DS_Store`、`Thumbs.db`、`*.tmp`、`*.swp`、`.vscode/`、`.idea/`
   
   **Tool-Specific Patterns**：
   - Docker：`node_modules/`、`.git/`、`Dockerfile*`、`.dockerignore`、`*.log*`、`.env*`、`coverage/`
   - ESLint：`node_modules/`、`dist/`、`build/`、`coverage/`、`*.min.js`
   - Prettier：`node_modules/`、`dist/`、`build/`、`coverage/`、`package-lock.json`、`yarn.lock`、`pnpm-lock.yaml`
   - Terraform：`.terraform/`、`*.tfstate*`、`*.tfvars`、`.terraform.lock.hcl`

5. 解析 tasks.md 结构并提取：
   - Task phases：Setup、Tests、Core、Integration、Polish
   - Task dependencies：顺序 vs 并行执行规则
   - Task details：ID、描述、文件路径、并行标记 [P]
   - Execution flow：执行顺序与依赖要求

6. 按任务计划执行实施：
   - Phase-by-phase execution：逐阶段完成后再进入下一阶段
   - Respect dependencies：按序执行串行任务，带 [P] 的并行任务可并行
   - Follow TDD approach：在对应实现任务之前先执行测试任务
   - File-based coordination：影响同一文件的任务必须串行
   - Validation checkpoints：每阶段结束前进行验证

7. 实施执行规则：
   - Setup first：初始化项目结构、依赖、配置
   - Tests before code：若需为 contracts、entities、integration 场景编写测试
   - Core development：实现 models、services、CLI commands、endpoints
   - Integration work：数据库连接、中间件、日志、外部服务
   - Polish and validation：单元测试、性能优化、文档

8. 进度跟踪与错误处理：
   - 每完成一个任务报告进度
   - 如任一非并行任务失败则停止
   - 对并行任务 [P]，继续处理成功项并报告失败项
   - 提供清晰的错误信息与调试上下文
   - 若无法继续实施，给出建议的下一步
   - **IMPORTANT** 完成的任务务必在 tasks 文件中标记为 [X]

9. 完成校验：
   - 验证所有必需任务均已完成
   - 检查实现的功能是否匹配原始 Specification
   - 验证测试通过且覆盖率满足要求
   - 确认实施符合 Technical Plan
   - 报告最终状态与已完成工作摘要

说明：该命令假设 `tasks.md` 中存在完整任务分解。若任务不完整或缺失，建议先运行 `/tasks` 以重新生成任务列表。
"""
